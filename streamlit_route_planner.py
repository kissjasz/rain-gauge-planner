import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
st.set_page_config(page_title="Rain Gauge Monitor", layout="wide")

import pandas as pd
import json
import os
from geopy.distance import geodesic
import networkx as nx
import urllib.parse
import itertools
import math
import time
from typing import List, Dict, Tuple, Optional

@st.cache_data(ttl=300)
def load_sheet_days() -> pd.DataFrame:
    sa = st.secrets["google_service_account"]
    creds = Credentials.from_service_account_info(
        sa, scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(sa["SHEET_ID"])
    ws = sh.worksheet(st.secrets["google_service_account"]["SHEET_TAB"])
    values = ws.get(st.secrets["google_service_account"]["SHEET_RANGE"])  # B..C

    rows = []
    for r in values:
        if len(r) < 2:
            continue
        station_id = (r[0] or "").strip()       # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå B
        days_raw = (r[1] or "").strip()         # ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå C
        if not station_id:
            continue

        # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å string ‡πÄ‡∏ä‡πà‡∏ô "‚ùå 62 ‡∏ß‡∏±‡∏ô" ‚Üí 62
        import re
        match = re.search(r"(\d+)", days_raw)
        days_val = int(match.group(1)) if match else None

        rows.append({"station_id": station_id, "days_not_maintained": days_val})

    return pd.DataFrame(rows)
    
# ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ê‡∏≤‡∏ô
BASE_LOCATION = {
    'station_id': 'BASE01',
    'name_th': '‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ (‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å)',
    'lat': 8.848510596250504,
    'lon': 98.80937422965278,
    'url': 'https://maps.app.goo.gl/6kMrzVxrXAnyNbiMA'
}

 

# ‚úÖ Utility Functions (Define first)
def safe_float_conversion(value, default=0.0):
    """‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô float ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        if value is None or pd.isna(value):
            return default
        return float(value)
    except (ValueError, TypeError):
        return default

def safe_get_station_name(df: pd.DataFrame, station_id: str, default: str = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠') -> str:
    """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        station_info = df[df['station_id'] == station_id]
        if not station_info.empty and 'name_th' in station_info.columns:
            name = station_info.iloc[0]['name_th']
            return str(name) if pd.notna(name) else default
        return default
    except Exception:
        return default

def cleanup_selected_stations():
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î selected_stations"""
    try:
        if not st.session_state.get('include_base_location', False):
            # ‡∏•‡∏ö BASE_LOCATION ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å selected_stations ‡∏ñ‡πâ‡∏≤ checkbox ‡∏ñ‡∏π‡∏Å uncheck
            if BASE_LOCATION['station_id'] in st.session_state.get('selected_stations', []):
                st.session_state.selected_stations.remove(BASE_LOCATION['station_id'])
        
        # ‡∏•‡∏ö duplicates ‡πÅ‡∏•‡∏∞ None values
        if 'selected_stations' in st.session_state:
            stations = st.session_state.selected_stations
            st.session_state.selected_stations = list(set(filter(None, stations)))
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")

def smart_rerun():
    """Rerun with intelligent delay to prevent race conditions"""
    try:
        if 'last_rerun_time' not in st.session_state:
            st.session_state.last_rerun_time = 0
        
        current_time = time.time()
        time_since_last = current_time - st.session_state.last_rerun_time
        
        if time_since_last < 0.5:  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rapid rerun
            time.sleep(0.5 - time_since_last)
        
        st.session_state.last_rerun_time = time.time()
        st.rerun()
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä: {str(e)}")

def find_nearest_station_optimized(clicked_lat: float, clicked_lng: float, df: pd.DataFrame, 
                                 include_base: bool = False, max_distance_m: int = 500) -> Optional[str]:
    """‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
    try:
        min_distance = float('inf')
        closest_station = None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏õ‡∏Å‡∏ï‡∏¥
        for _, row in df.iterrows():
            lat_val = safe_float_conversion(row.get('lat'))
            lon_val = safe_float_conversion(row.get('lon'))
            
            if lat_val == 0.0 and lon_val == 0.0:
                continue
                
            try:
                distance = geodesic((clicked_lat, clicked_lng), (lat_val, lon_val)).meters
                if distance < min_distance and distance < max_distance_m:
                    min_distance = distance
                    closest_station = str(row['station_id'])
            except Exception:
                continue
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        if include_base:
            try:
                base_distance = geodesic(
                    (clicked_lat, clicked_lng), 
                    (BASE_LOCATION['lat'], BASE_LOCATION['lon'])
                ).meters
                if base_distance < min_distance and base_distance < max_distance_m:
                    closest_station = BASE_LOCATION['station_id']
            except Exception:
                pass
        
        return closest_station
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: {str(e)}")
        return None

# ‚úÖ Create Route Map Function (Define before main)
def create_route_map(route_info: List[Dict], path_coords: List[List[float]], total_distance: float):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á"""
    try:
        import folium
    except ImportError:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ folium library")
        return None
        
    try:
        if not route_info or len(path_coords) < 2:
            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
            return None
        
        # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
        center_lat = sum([coord[0] for coord in path_coords]) / len(path_coords)
        center_lon = sum([coord[1] for coord in path_coords]) / len(path_coords)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        route_map = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=10,
            tiles='OpenStreetMap',
            prefer_canvas=True
        )
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° markers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        for info in route_info:
            try:
                if info.get('is_base', False):
                    color = 'green'
                    icon = 'home'
                    popup_text = f"<b>üè¢ {info['order']}. {info['station_id']}</b><br><strong>{info['name_th']}</strong><br><i>‡∏ê‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£</i>"
                else:
                    if info['order'] == 1:
                        color = 'green'
                        icon = 'play'
                    elif info['order'] == len(route_info):
                        color = 'red'
                        icon = 'stop'
                    else:
                        color = 'blue'
                        icon = 'info-sign'
                    popup_text = f"<b>üì° {info['order']}. {info['station_id']}</b><br><strong>{info['name_th']}</strong>"
                
                folium.Marker(
                    [info['lat'], info['lon']],
                    popup=folium.Popup(popup_text, max_width=200),
                    tooltip=f"{info['order']}. {info['station_id']}",
                    icon=folium.Icon(color=color, icon=icon)
                ).add_to(route_map)
            except Exception as marker_error:
                continue  # ‡∏Ç‡πâ‡∏≤‡∏° marker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        try:
            folium.PolyLine(
                path_coords,
                color='red',
                weight=4,
                opacity=0.8,
                popup=f'‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: {total_distance:.2f} ‡∏Å‡∏°.'
            ).add_to(route_map)
        except Exception as line_error:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° distance markers ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        try:
            for i in range(len(path_coords)-1):
                mid_lat = (path_coords[i][0] + path_coords[i+1][0]) / 2
                mid_lon = (path_coords[i][1] + path_coords[i+1][1]) / 2
                distance = geodesic(path_coords[i], path_coords[i+1]).km
                
                folium.Marker(
                    [mid_lat, mid_lon],
                    popup=f"‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á: {distance:.1f} ‡∏Å‡∏°.",
                    icon=folium.DivIcon(
                        html=f'<div style="background-color: white; border: 2px solid red; border-radius: 5px; padding: 2px 4px; font-size: 10px; font-weight: bold; color: red;">{distance:.1f}‡∏Å‡∏°</div>',
                        icon_size=(50, 20),
                        icon_anchor=(25, 10)
                    )
                ).add_to(route_map)
        except Exception as distance_error:
            pass  # Distance markers ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        
        return route_map
        
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {str(e)}")
        return None

# ‚úÖ Data Loading Functions
@st.cache_data(ttl=3600)
def load_station_data(file_path: str = 'Latlonstation_config.json') -> pd.DataFrame:
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
    try:
        if not os.path.exists(file_path):
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path} - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á")
            sample_data = {
                'G1001': {'name_th': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1', 'lat': 13.7563, 'lon': 100.5018, 'url': ''},
                'G1002': {'name_th': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2', 'lat': 13.7263, 'lon': 100.5318, 'url': ''},
                'G1003': {'name_th': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3', 'lat': 8.5000, 'lon': 98.5000, 'url': ''}
            }
            return pd.DataFrame.from_dict(sample_data, orient='index').reset_index().rename(columns={'index': 'station_id'})
        
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if not data:
            st.error("‚ùå ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
            return pd.DataFrame()
        
        df = pd.DataFrame.from_dict(data, orient='index')
        df.reset_index(inplace=True)
        df.rename(columns={'index': 'station_id'}, inplace=True)
        
        # ‚úÖ Data validation ‡πÅ‡∏•‡∏∞ cleaning
        required_columns = ['station_id', 'lat', 'lon']
        missing_columns = [col for col in required_columns if col not in df.columns]
        if missing_columns:
            st.error(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {missing_columns}")
            return pd.DataFrame()
        
        # Clean ‡πÅ‡∏•‡∏∞ validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
        df['lon'] = pd.to_numeric(df['lon'], errors='coerce')
        df['name_th'] = df.get('name_th', '').fillna('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')
        df['url'] = df.get('url', '').fillna('')
        
        # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        original_count = len(df)
        df = df.dropna(subset=['lat', 'lon'])
        if len(df) < original_count:
            st.info(f"‚ÑπÔ∏è ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {original_count - len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        
        return df
        
    except json.JSONDecodeError as e:
        st.error(f"‚ùå ‡πÑ‡∏ü‡∏•‡πå JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
        return pd.DataFrame()

# ‚úÖ Session State Management
def init_session_state():
    """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô session state ‡∏û‡∏£‡πâ‡∏≠‡∏° validation"""
    defaults = {
        'selected_stations': [],
        'map_mode': 'select',
        'last_calculation_time': 0,
        'include_base_location': False,
        'last_rerun_time': 0,
        'last_map_click': None,
        'last_map_click_time': 0.0,
        'map_version': 0,
        'pending_station': None,
        'pending_ts': 0.0,
    }
    
    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value
    
    # ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ (‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö: ‡πÉ‡∏ä‡πâ 100 ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
    MAX_STATIONS = 100
    if len(st.session_state.selected_stations) > MAX_STATIONS:
        st.session_state.selected_stations = st.session_state.selected_stations[:MAX_STATIONS]
        st.warning(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_STATIONS} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")

def safe_update_session_state(key: str, value, rerun: bool = False):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session state ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    try:
        st.session_state[key] = value
        if rerun:
            smart_rerun()
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {str(e)}")

# ‚úÖ TSP Algorithm
@st.cache_data(ttl=1800)
def calculate_optimal_route(
    stations_data: List[Dict], 
    start_station: str, 
    end_station: str,
    max_stations_exact: int = 10
) -> Tuple[List[str], float]:
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° performance optimization"""
    
    if len(stations_data) < 2:
        return [], 0.0
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        tsp_df = pd.DataFrame(stations_data)
        
        if tsp_df.empty or 'lat' not in tsp_df.columns or 'lon' not in tsp_df.columns:
            return [], 0.0
        
        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î
        tsp_df['lat'] = pd.to_numeric(tsp_df['lat'], errors='coerce')
        tsp_df['lon'] = pd.to_numeric(tsp_df['lon'], errors='coerce')
        tsp_df = tsp_df.dropna(subset=['lat', 'lon'])
        
        if len(tsp_df) < 2:
            return [], 0.0
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á graph
        G = nx.complete_graph(len(tsp_df))
        positions = list(zip(tsp_df['lat'], tsp_df['lon']))
        id_map = dict(zip(range(len(tsp_df)), tsp_df['station_id']))
        reverse_id_map = {v: k for k, v in id_map.items()}
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
        for i in G.nodes:
            for j in G.nodes:
                if i != j:
                    try:
                        dist = geodesic(positions[i], positions[j]).km
                        G[i][j]['weight'] = dist
                    except Exception:
                        G[i][j]['weight'] = float('inf')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ start ‡πÅ‡∏•‡∏∞ end station ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if start_station not in reverse_id_map or end_station not in reverse_id_map:
            st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ {start_station} ‡∏´‡∏£‡∏∑‡∏≠ {end_station} ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return [], 0.0
        
        start_node = reverse_id_map[start_station]
        end_node = reverse_id_map[end_station]
        nodes = [n for n in G.nodes if n not in [start_node, end_node]]
        
        best_route = None
        min_distance = float('inf')
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        if len(G.nodes) <= max_stations_exact:
            # Exact algorithm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ô‡πâ‡∏≠‡∏¢
            for perm in itertools.permutations(nodes):
                route = [start_node] + list(perm)
                if start_node != end_node:
                    route.append(end_node)
                else:
                    route.append(start_node)
                
                distance = 0
                valid_route = True
                for i in range(len(route)-1):
                    weight = G[route[i]][route[i+1]].get('weight', float('inf'))
                    if weight == float('inf'):
                        valid_route = False
                        break
                    distance += weight
                
                if valid_route and distance < min_distance:
                    min_distance = distance
                    best_route = route
        else:
            # Approximation algorithm ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏°‡∏≤‡∏Å
            try:
                cycle = nx.approximation.traveling_salesman_problem(
                    G, weight='weight', cycle=True
                )
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                if start_node in cycle:
                    start_idx = cycle.index(start_node)
                    cycle = cycle[start_idx:] + cycle[:start_idx]
                
                if start_node != end_node and end_node in cycle:
                    end_idx = cycle.index(end_node)
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    route_nodes = [n for n in cycle if n not in [start_node, end_node]]
                    best_route = [start_node] + route_nodes + [end_node]
                else:
                    best_route = cycle
                
                min_distance = sum(G[best_route[i]][best_route[i+1]].get('weight', 0) 
                                 for i in range(len(best_route)-1))
                                 
            except Exception as e:
                st.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°: {str(e)}")
                # Fallback: ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
                best_route = [start_node] + nodes + ([end_node] if start_node != end_node else [start_node])
                min_distance = sum(G[best_route[i]][best_route[i+1]].get('weight', 0) 
                                 for i in range(len(best_route)-1))
        
        if best_route is None or min_distance == float('inf'):
            return [], 0.0
        
        ordered_stations = [id_map[i] for i in best_route]
        return ordered_stations, min_distance
        
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {str(e)}")
        return [], 0.0

# ‚úÖ Interactive Map Functions
def create_interactive_map(df_filtered: pd.DataFrame, include_base: bool = False):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà interactive ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling"""
    try:
        import folium
    except ImportError:
        st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á: pip install folium")
        return None
    
    try:
        # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
        display_df = df_filtered.copy()
        if include_base:
            base_df = pd.DataFrame([BASE_LOCATION])
            display_df = pd.concat([display_df, base_df], ignore_index=True)
        
        if display_df.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
            return None
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î
        valid_coords = display_df.dropna(subset=['lat', 'lon'])
        if valid_coords.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return None
        
        # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        center_lat = valid_coords['lat'].mean()
        center_lon = valid_coords['lon'].mean()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ center
        if pd.isna(center_lat) or pd.isna(center_lon):
            center_lat, center_lon = 13.7563, 100.5018  # default: Bangkok
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        m = folium.Map(
            location=[center_lat, center_lon],
            zoom_start=8,
            tiles='OpenStreetMap',
            prefer_canvas=True
        )
        # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ MarkerCluster ‡πÉ‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        for idx, row in valid_coords.iterrows():
            try:
                station_id = str(row['station_id'])
                name_th = str(row.get('name_th', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠'))
                lat = safe_float_conversion(row['lat'])
                lon = safe_float_conversion(row['lon'])
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
                if (lat == 0.0 and lon == 0.0) or not (5.0 <= lat <= 21.0 and 97.0 <= lon <= 106.0):
                    continue
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                is_base_station = station_id == BASE_LOCATION['station_id']
                is_selected = station_id in st.session_state.get('selected_stations', [])
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                if is_base_station:
                    color = 'green'
                    icon = 'home'
                    prefix = 'fa'
                elif is_selected:
                    color = 'red'
                    icon = 'star'
                    prefix = 'fa'
                else:
                    color = 'blue'
                    icon = 'tint'
                    prefix = 'fa'
                # ... ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î is_base_station, is_selected, color, icon ‡πÅ‡∏•‡πâ‡∏ß
                dnm_val = None
                try:
                    row_info = df_filtered[df_filtered['station_id'] == station_id]
                    if not row_info.empty and 'days_not_maintained' in row_info.columns:
                        dnm_val = row_info.iloc[0].get('days_not_maintained')
                except:
                    pass

                days_txt = (
                    f"<div style='margin-top:4px;'>üõ†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏°‡∏≤ <b>{int(dnm_val)}</b> ‡∏ß‡∏±‡∏ô</div>"
                    if pd.notna(dnm_val) else ""
                )
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á popup text
                if is_base_station:
                    popup_text = f"""
                    <div style="min-width: 220px; text-align: center;">
                    <b style="color: green; font-size: 14px;">üè¢ {name_th}</b><br>
                    <strong>‡∏£‡∏´‡∏±‡∏™: {station_id}</strong><br>
                    ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {lat:.4f}, {lon:.4f}<br>
                    <div style="margin: 5px 0; padding: 5px; background-color: #e8f5e8; border-radius: 3px; border: 1px solid #4caf50;">
                    <strong>üéØ ‡∏ê‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å</strong>
                    </div>
                    <small style="color: #666;">
                    <a href="{row.get('url', '#')}" target="_blank">üìç ‡∏î‡∏π‡πÉ‡∏ô Google Maps</a>
                    </small>
                    </div>
                    """
                else:
                    popup_text = f"""
                    <div style="min-width: 200px; text-align: center;">
                    <b style="color: {'red' if is_selected else 'blue'};">{station_id}</b><br>
                    <strong>{name_th}</strong><br>
                    ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {lat:.4f}, {lon:.4f}<br>
                    {days_txt}
                    <div style="margin: 5px 0; padding: 5px; background-color: {'#ffebee' if is_selected else '#e3f2fd'}; border-radius: 3px;">
                    ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß' if is_selected else '‚ö™ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}
                    </div>
                    <small style="color: #666;">üí° ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠{'‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' if is_selected else '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å'}</small>
                    </div>
                    """
                def color_by_days(d):
                    if d is None or not pd.notna(d): 
                        return "blue"
                    v = int(d)
                    if v > 60: 
                        return "red"       # > 60 ‡∏ß‡∏±‡∏ô = ‡πÅ‡∏î‡∏á
                    if v > 31: 
                        return "orange"    # 32‚Äì60 ‡∏ß‡∏±‡∏ô = ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
                    return "green"         # ‚â§ 31 ‡∏ß‡∏±‡∏ô = ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß

                if not is_base_station:
                    color = color_by_days(dnm_val)
                # ‡∏ó‡∏≥ tooltip ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏±‡∏á‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                label = f"{station_id} | {int(dnm_val)} ‡∏ß‡∏±‡∏ô" if pd.notna(dnm_val) else station_id  # ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢: f"{station_id} | {int(dnm_val)} ‡∏ß‡∏±‡∏ô" if pd.notna(dnm_val) else station_id
                tooltip = folium.Tooltip(label, permanent=true, direction="top", sticky=False)   
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° marker
                folium.Marker(
                    [lat, lon],
                    popup=folium.Popup(popup_text, max_width=250),
                    tooltip=tooltip,   # ‚Üê ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                    icon=folium.Icon(color=color, icon=icon, prefix=prefix)
                ).add_to(m)
                
            except Exception as marker_error:
                continue  # ‡∏Ç‡πâ‡∏≤‡∏° marker ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        
        return m
        
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: {str(e)}")
        return None

# ‚úÖ Main Application
def main():
    """‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        init_session_state()
        
        st.title("üì° Rain Gauge Station Viewer & Interactive Route Planner")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ..."):
            df = load_station_data()
            try:
                sheet_df = load_sheet_days()
                if not sheet_df.empty:
                    df = df.merge(sheet_df, on="station_id", how="left")
                else:
                    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet")
            except Exception as e:
                st.warning(f"‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")
        
        if df.empty:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÑ‡∏î‡πâ")
            st.stop()
        
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á search logic
        if search_term:
            search_term = search_term.strip()
            if search_term:
                try:
                    df_filtered = df[
                        df['station_id'].astype(str).str.contains(search_term, case=False, na=False) |
                        df['name_th'].astype(str).str.contains(search_term, case=False, na=False)
                    ]
                except Exception as search_error:
                    st.warning(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(search_error)}")
                    df_filtered = df
            else:
                df_filtered = df
        else:
            df_filtered = df
        
        # ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î
        st.sidebar.header("üîß ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
        only_with_coords = st.sidebar.checkbox("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ñ‡∏£‡∏ö", value=True)
        
        if only_with_coords:
            df_filtered = df_filtered.dropna(subset=['lat', 'lon'])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        st.sidebar.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", len(df))
        st.sidebar.metric("‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á", len(df_filtered))
        st.sidebar.metric("‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", len(st.session_state.get('selected_stations', [])))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with st.expander("üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", expanded=False):
            if not df_filtered.empty:
                display_columns = ['station_id', 'name_th', 'lat', 'lon']
                available_columns = [col for col in display_columns if col in df_filtered.columns]
                st.dataframe(df_filtered[available_columns], use_container_width=True)
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        
        # Interactive Map Section
        st.subheader("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà Interactive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏ß‡∏°‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
        col_base, col_info = st.columns([1, 2])
        with col_base:
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ key ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà rerun ‡πÉ‡∏ô callback
            include_base = st.checkbox(
                "üè¢ ‡∏£‡∏ß‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ê‡∏≤‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£",
                value=st.session_state.get('include_base_location', False),
                help="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å (8.8485¬∞N, 98.8094¬∞E)",
                key="include_base_checkbox"
            )
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà rerun ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ß‡πâ
            if include_base != st.session_state.get('include_base_location', False):
                st.session_state.include_base_location = include_base
                cleanup_selected_stations()
                # ‡πÑ‡∏°‡πà rerun ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà - ‡πÉ‡∏´‡πâ Streamlit ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á
        
        with col_info:
            # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session state ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ include_base
            if st.session_state.get('include_base_location', False):
                st.info(f"üìç **{BASE_LOCATION['name_th']}**  \nüìå {BASE_LOCATION['lat']:.4f}, {BASE_LOCATION['lon']:.4f}")
        
        # Control buttons
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            if st.button("üéØ ‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", help="‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà marker ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"):
                safe_update_session_state('map_mode', 'select')
        
        with col2:
            if st.button("üõ£Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", help="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà"):
                safe_update_session_state('map_mode', 'route')
        
        with col3:
            if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", help="‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"):
                if st.session_state.get('selected_stations', []):
                    count = len(st.session_state.selected_stations)
                    safe_update_session_state('selected_stations', [])
                    st.success(f"‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å {count} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÅ‡∏•‡πâ‡∏ß")
                    # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ debounce ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    st.session_state.last_map_click = None
                    st.session_state.last_map_click_time = 0.0
                    st.session_state.map_version = st.session_state.get('map_version', 0) + 1
        
        with col4:
            selected_count = len(st.session_state.get('selected_stations', []))
            MAX_STATIONS = 100
            st.metric(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß", 
                f"{selected_count}/{MAX_STATIONS} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ", 
                delta=f"{MAX_STATIONS-selected_count} ‡πÄ‡∏´‡∏•‡∏∑‡∏≠" if selected_count < MAX_STATIONS else "‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß"
            )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        if not df_filtered.empty or include_base:
            # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏£‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á key ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ event handler ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠
            map_key = f"main_map_{st.session_state.get('map_version', 0)}"
            map_obj = create_interactive_map(df_filtered, include_base)
            if map_obj:
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                map_mode = st.session_state.get('map_mode', 'select')
                if map_mode == 'select':
                    st.info("üéØ **‡πÇ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ**: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà marker ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
                else:
                    st.info("üõ£Ô∏è **‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á**: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÑ‡∏ß‡πâ")
                
                try:
                    from streamlit_folium import st_folium
                    
                    map_data = st_folium(
                        map_obj, 
                        width=700, 
                        height=500,
                        returned_objects=["last_clicked", "last_object_clicked"],
                        key=map_key
                    )
                    
                    # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                    clicked_event = None
                    if map_data:
                        # ‡πÉ‡∏ä‡πâ last_object_clicked ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô), ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≠‡∏¢ fallback ‡πÄ‡∏õ‡πá‡∏ô last_clicked
                        if map_data.get('last_object_clicked') and map_mode == 'select':
                            clicked_event = map_data.get('last_object_clicked')
                        elif map_data.get('last_clicked') and map_mode == 'select':
                            clicked_event = map_data.get('last_clicked')
                    
                    if clicked_event and clicked_event.get('lat') is not None:
                        clicked_lat = clicked_event['lat']
                        clicked_lng = clicked_event['lng']
                        # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏î‡∏¥‡∏°‡∏ã‡πâ‡∏≥ ‡πÜ ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡πâ‡∏ô ‡πÜ
                        current_click = (round(clicked_lat, 5), round(clicked_lng, 5))
                        last_click = st.session_state.get('last_map_click')
                        last_click_time = st.session_state.get('last_map_click_time', 0.0)
                        now_ts = time.time()
                        # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πä‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏ã‡πâ‡∏≥
                        is_duplicate_very_recent = (last_click == current_click) and (now_ts - last_click_time < 0.2)
                        if not is_duplicate_very_recent:
                            # ‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                            closest_station = find_nearest_station_optimized(
                                clicked_lat, clicked_lng, df_filtered, include_base, 500
                            )
                            if not closest_station:
                                # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏Å‡∏°. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô 500 ‡∏°.
                                closest_station = find_nearest_station_optimized(
                                    clicked_lat, clicked_lng, df_filtered, include_base, 1000
                                )
                            if not closest_station:
                                # ‡∏•‡∏≠‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà 2 ‡∏Å‡∏°. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÇ‡∏î‡∏ô‡πÄ‡∏õ‡πä‡∏∞
                                closest_station = find_nearest_station_optimized(
                                    clicked_lat, clicked_lng, df_filtered, include_base, 2000
                                )
                            
                            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                            if closest_station:
                                try:
                                    current_stations = st.session_state.get('selected_stations', [])
                                    if closest_station in current_stations:
                                        current_stations.remove(closest_station)
                                        st.success(f"‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {closest_station}")
                                    else:
                                        MAX_STATIONS = 100
                                        if len(current_stations) < MAX_STATIONS:
                                            current_stations.append(closest_station)
                                            st.success(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {closest_station}")
                                        else:
                                            st.warning(f"‚ö†Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {MAX_STATIONS} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
                                    st.session_state.selected_stations = current_stations

                                    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å
                                    st.session_state.last_map_click = current_click
                                    st.session_state.last_map_click_time = now_ts
                                    st.session_state.map_version = st.session_state.get('map_version', 0) + 1

                                    # ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ marker
                                    smart_rerun()

                                except Exception as selection_error:
                                    st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: {str(selection_error)}")
                            else:
                                st.caption("‡∏Ñ‡∏•‡∏¥‡∏Å‡πÉ‡∏Å‡∏•‡πâ marker ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‚â§ 1‚Äì2 km ‡∏´‡∏≤‡∏Å‡∏ã‡∏π‡∏°‡πÑ‡∏Å‡∏•)")
                            
                except ImportError:
                    st.error("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á streamlit-folium: pip install streamlit-folium")
                    st.code("pip install streamlit-folium", language="bash")
                    st.stop()
                except Exception as map_error:
                    st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà: {str(map_error)}")
                    st.info("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        else:
            st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        st.subheader("üìù ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
        
        selected_stations = st.session_state.get('selected_stations', [])
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        if selected_stations:
            st.write("**‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß:**")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö grid
            cols = st.columns(min(len(selected_stations), 4))
            stations_to_remove = []
            
            for i, station_id in enumerate(selected_stations):
                with cols[i % 4]:
                    if station_id == BASE_LOCATION['station_id']:
                        station_name = BASE_LOCATION['name_th']
                        icon = "üè¢"
                    else:
                        station_name = safe_get_station_name(df_filtered, station_id)
                        icon = "üì°"
                    
                    if st.button(f"‚ùå {icon} {station_id}", key=f"remove_{station_id}_{i}"):
                        stations_to_remove.append(station_id)
                    st.caption(station_name)
            
            # ‡∏•‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            for station_id in stations_to_remove:
                if station_id in selected_stations:
                    selected_stations.remove(station_id)
                    st.session_state.selected_stations = selected_stations
        
        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
        st.write("**‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡∏°‡πà:**")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        available_stations = df_filtered[
            ~df_filtered['station_id'].isin(selected_stations)
        ] if not df_filtered.empty else pd.DataFrame()
        
        if not available_stations.empty:
            def format_station_option(station_id):
                # ‡πÉ‡∏ä‡πâ df ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
                station_name = safe_get_station_name(df, station_id)
                return f"üì° {station_id} - {station_name}"
            
            MAX_STATIONS = 100
            selected_new_stations = st.multiselect(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°:",
                options=available_stations['station_id'].tolist(),
                format_func=format_station_option,
                max_selections=max(0, MAX_STATIONS - len(selected_stations)),
                help=f"‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å {max(0, MAX_STATIONS - len(selected_stations))} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ"
            )
            
            if st.button("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å") and selected_new_stations:
                try:
                    current_stations = set(selected_stations)
                    new_stations = current_stations.union(set(selected_new_stations))
                    st.session_state.selected_stations = list(new_stations)
                    st.success(f"‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(selected_new_stations)} ‡πÅ‡∏´‡πà‡∏á")
                except Exception as add_error:
                    st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ: {str(add_error)}")
        else:
            st.info("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°")
        
        # ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
        st.subheader("üõ£Ô∏è ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á")
        
        if len(selected_stations) >= 2:
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö selectbox
            station_options = []
            station_name_map = {}
            
            for station_id in selected_stations:
                if station_id == BASE_LOCATION['station_id']:
                    display_name = f"üè¢ {station_id} - {BASE_LOCATION['name_th']}"
                else:
                    # ‡πÉ‡∏ä‡πâ df ‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏°‡∏≠
                    station_name = safe_get_station_name(df, station_id)
                    display_name = f"üì° {station_id} - {station_name}"
                
                station_options.append(display_name)
                station_name_map[display_name] = station_id
            
            col1, col2 = st.columns(2)
            with col1:
                # ‡πÉ‡∏´‡πâ‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô default ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                default_start = 0
                if BASE_LOCATION['station_id'] in selected_stations:
                    for i, option in enumerate(station_options):
                        if BASE_LOCATION['station_id'] in option:
                            default_start = i
                            break
                
                start_display = st.selectbox(
                    "‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô:",
                    station_options,
                    key="start_station_display",
                    index=default_start
                )
                start_station = station_name_map[start_display]
            
            with col2:
                # ‡πÉ‡∏´‡πâ‡∏ê‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö end ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                default_end = len(station_options) - 1
                if BASE_LOCATION['station_id'] in selected_stations:
                    for i, option in enumerate(station_options):
                        if BASE_LOCATION['station_id'] in option:
                            default_end = i
                            break
                
                end_display = st.selectbox(
                    "‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î:",
                    station_options,
                    key="end_station_display",
                    index=default_end
                )
                end_station = station_name_map[end_display]
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô rate limiting
            current_time = time.time()
            last_calc_time = st.session_state.get('last_calculation_time', 0)
            
            if st.button("üßÆ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"):
                if current_time - last_calc_time < 2:
                    st.warning("‚è∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà")
                else:
                    st.session_state.last_calculation_time = current_time
                    
                    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°..."):
                        try:
                            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ
                            stations_data = []
                            
                            for station_id in selected_stations:
                                if station_id == BASE_LOCATION['station_id']:
                                    stations_data.append(BASE_LOCATION.copy())
                                else:
                                    station_info = df_filtered[df_filtered['station_id'] == station_id]
                                    if not station_info.empty:
                                        station_dict = station_info.iloc[0].to_dict()
                                        # ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ name_th
                                        if 'name_th' not in station_dict or pd.isna(station_dict['name_th']):
                                            station_dict['name_th'] = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
                                        stations_data.append(station_dict)
                            
                            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
                            ordered_stations, min_distance = calculate_optimal_route(
                                stations_data, start_station, end_station
                            )
                            
                            if ordered_stations and min_distance > 0:
                                # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á session
                                route_info = []
                                path_coords = []
                                for idx, station_id in enumerate(ordered_stations):
                                    if station_id == BASE_LOCATION['station_id']:
                                        station_data = BASE_LOCATION
                                        is_base = True
                                    else:
                                        station_info = df[df['station_id'] == station_id]
                                        if not station_info.empty:
                                            station_data = station_info.iloc[0].to_dict()
                                            if 'name_th' not in station_data or pd.isna(station_data['name_th']):
                                                station_data['name_th'] = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠'
                                            is_base = False
                                        else:
                                            continue
                                    try:
                                        lat = safe_float_conversion(station_data['lat'])
                                        lon = safe_float_conversion(station_data['lon'])
                                        path_coords.append([lat, lon])
                                        route_info.append({
                                            'station_id': station_id,
                                            'name_th': str(station_data['name_th']),
                                            'lat': lat,
                                            'lon': lon,
                                            'order': idx + 1,
                                            'is_base': is_base
                                        })
                                    except Exception:
                                        continue
                                st.session_state.route_result = {
                                    'ordered_stations': ordered_stations,
                                    'min_distance': float(min_distance),
                                    'route_info': route_info,
                                    'path_coords': path_coords
                                }
                                st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß")
                            else:
                                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ")
                                
                        except Exception as calc_error:
                            st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: {str(calc_error)}")
                            st.info("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö")
        
        elif len(selected_stations) == 1:
            st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
        else:
            st.info("‚ÑπÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô")
        
        # Planning Section (‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ)
        st.subheader("üìÜ ‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏±‡∏á‡∏ô‡πâ‡∏≥‡∏ù‡∏ô")
        
        with st.expander("üìã ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", expanded=False):
            total_stations = len(df_filtered)
            
            col1, col2, col3 = st.columns(3)
            with col1:
                max_days_available = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ß‡∏±‡∏ô):", min_value=1, value=30)
            with col2:
                avg_stations_per_day = st.number_input("‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô:", min_value=1, value=7)
            with col3:
                target_stations = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à:", min_value=1, value=min(total_stations, 50))
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
            min_required_days = math.ceil(target_stations / avg_stations_per_day)
            total_capacity = max_days_available * avg_stations_per_day
            suggested_per_day = math.ceil(target_stations / max_days_available)
            
            st.info(f"üéØ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à {target_stations} ‡∏ñ‡∏±‡∏á ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô {max_days_available} ‡∏ß‡∏±‡∏ô")
            
            if total_capacity < target_stations:
                st.error(f"‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {total_capacity} ‡∏ñ‡∏±‡∏á ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠")
                st.warning(f"üîÑ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {suggested_per_day} ‡∏ñ‡∏±‡∏á")
            else:
                st.success(f"‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ‡πÉ‡∏ô {min_required_days} ‡∏ß‡∏±‡∏ô ‡∏´‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏•‡∏∞ {avg_stations_per_day} ‡∏à‡∏∏‡∏î")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å session ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡∏¢)
        if 'route_result' in st.session_state:
            res = st.session_state['route_result']
            ordered_stations = res.get('ordered_stations') or []
            min_distance = res.get('min_distance') or 0.0
            route_info = res.get('route_info') or []
            path_coords = res.get('path_coords') or []

            if ordered_stations and path_coords:
                st.subheader("üìç ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
                st.success(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: {min_distance:.2f} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£")
                for info in route_info:
                    icon = "üè¢" if info.get('is_base') else "üì°"
                    st.write(f"{info['order']}. {icon} **{info['station_id']}** - {info['name_th']}")

                if len(path_coords) >= 2:
                    st.markdown("**üß≠ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô Google Maps:**")
                    try:
                        maps_url = "https://www.google.com/maps/dir/" + "/".join([
                            f"{coord[0]},{coord[1]}" for coord in path_coords
                        ])
                        st.markdown(f"[üì± ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏ô Google Maps]({maps_url})")
                    except Exception:
                        pass

                    st.subheader("üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
                    try:
                        route_map = create_route_map(route_info, path_coords, min_distance)
                        if route_map:
                            from streamlit_folium import st_folium
                            st_folium(route_map, width=700, height=500, key="route_map_latest")
                    except Exception:
                        pass
        
    except Exception as main_error:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: {str(main_error)}")
        st.info("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
        
        if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô"):
            # ‡∏•‡πâ‡∏≤‡∏á session state ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            for key in list(st.session_state.keys()):
                try:
                    del st.session_state[key]
                except:
                    pass
            # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö rerun ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÄ‡∏≠‡∏á

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô: {str(e)}")
        st.code("""
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:
        1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á libraries
        2. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏û‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
        3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """)
        
        if st.button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Requirements"):
            requirements = """
streamlit>=1.28.0
pandas>=1.5.0
geopy>=2.3.0
networkx>=3.0
folium>=0.14.0
streamlit-folium>=0.13.0
            """.strip()
            st.download_button(
                "üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î requirements.txt",
                requirements,
                "requirements.txt",
                "text/plain"

            )


















